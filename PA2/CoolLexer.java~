/* The following code was generated by JFlex 1.6.1 */

/*
 * CS164: Spring 2004
 * Programming Assignment 2
 *
 * The scanner definition for Cool.
 *
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>cool.lex</tt>
 */
class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LINE_COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\12\1\13\1\1\1\4\1\5\1\4\22\0\1\2\1\0"+
    "\1\11\5\0\1\73\1\74\1\64\1\62\1\70\1\3\1\66\1\63"+
    "\12\10\1\72\1\71\1\65\1\6\1\7\1\0\1\75\1\15\1\61"+
    "\1\14\1\32\1\17\1\22\1\61\1\25\1\23\2\61\1\20\1\61"+
    "\1\24\1\31\1\44\1\61\1\26\1\16\1\27\1\36\1\30\1\34"+
    "\1\61\1\43\1\61\4\0\1\42\1\0\1\47\1\45\1\46\1\56"+
    "\1\40\1\21\1\45\1\52\1\50\2\45\1\41\1\45\1\51\1\55"+
    "\1\33\1\45\1\53\1\37\1\35\1\60\1\54\1\57\3\45\1\77"+
    "\1\0\1\76\1\67\6\0\1\4\32\0\1\2\u15df\0\1\2\u097f\0"+
    "\13\2\35\0\1\4\1\4\5\0\1\2\57\0\1\2\u0fa0\0\1\2"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\4\2\1\10\5\2\1\10\1\2\4\10"+
    "\1\2\6\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\1\1\27\1\30\1\31\1\32\1\33\7\0\1\10"+
    "\2\34\1\0\1\35\1\36\3\0\1\37\1\10\1\0"+
    "\7\10\1\0\3\10\1\35\1\36\2\10\1\37\1\10"+
    "\5\0\1\40\1\0\1\10\2\0\1\41\1\42\1\0"+
    "\1\10\1\0\5\10\1\40\1\10\1\0\4\10\1\41"+
    "\1\42\1\10\1\43\2\0\1\44\1\45\1\46\1\10"+
    "\2\0\1\47\1\50\1\0\1\47\1\51\1\52\1\44"+
    "\1\45\1\46\1\50\1\43\4\10\1\53\1\0\1\54"+
    "\2\0\1\55\1\53\2\10\1\55\1\0\1\56\1\0"+
    "\1\56\1\10\2\0\1\10\1\0\2\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\300\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\u0780\0\300\0\300\0\300\0\300\0\300\0\300\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\300\0\u07c0"+
    "\0\300\0\u0800\0\300\0\300\0\300\0\u0840\0\u0880\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0640\0\300\0\u0a40"+
    "\0\300\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\300\0\u0b80\0\u0bc0"+
    "\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0"+
    "\0\u0e00\0\u0e40\0\u0e80\0\u0640\0\u0ec0\0\u0f00\0\u0f40\0\u0640"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\300\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\300\0\300\0\u1200\0\u1240\0\u1280"+
    "\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u0640\0\u1400\0\u1440"+
    "\0\u1480\0\u14c0\0\u1500\0\u1540\0\u0640\0\u0640\0\u1580\0\300"+
    "\0\u15c0\0\u1600\0\300\0\300\0\300\0\u1640\0\u1680\0\u16c0"+
    "\0\300\0\u0640\0\u1700\0\u0640\0\u0640\0\u0640\0\u0640\0\u0640"+
    "\0\u0640\0\300\0\u0640\0\u1740\0\u1780\0\u17c0\0\u1800\0\300"+
    "\0\u1840\0\u0640\0\u1880\0\u18c0\0\300\0\u0640\0\u1900\0\u1940"+
    "\0\u0640\0\u1980\0\300\0\u19c0\0\u0640\0\u1a00\0\u1a40\0\u1a80"+
    "\0\u1ac0\0\u1b00\0\300\0\u0640\0\300";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\6\1\10\1\4\1\11"+
    "\1\12\1\4\1\6\1\13\1\4\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\4\1\23\1\4\1\24"+
    "\1\4\1\25\1\26\1\27\1\4\1\30\1\31\1\32"+
    "\2\4\1\33\1\34\1\35\1\34\1\36\1\37\3\34"+
    "\1\40\1\34\1\41\1\34\1\4\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\2\60\2\0\72\60"+
    "\1\62\1\0\3\62\1\0\4\62\2\4\64\62\101\0"+
    "\2\6\1\0\2\6\5\0\1\6\67\0\1\63\3\0"+
    "\1\64\77\0\1\65\100\0\1\11\104\0\1\66\2\0"+
    "\1\67\20\0\1\67\5\0\1\66\50\0\1\70\75\0"+
    "\1\71\1\0\1\72\16\0\1\71\1\0\1\72\55\0"+
    "\1\73\11\0\1\74\6\0\1\73\14\0\1\74\32\0"+
    "\1\34\3\0\1\34\1\75\5\34\1\76\23\34\1\75"+
    "\1\76\11\34\41\0\1\77\24\0\1\77\45\0\1\100"+
    "\2\0\2\101\1\0\1\102\12\0\1\100\11\0\1\102"+
    "\45\0\1\103\11\0\1\104\6\0\1\103\14\0\1\104"+
    "\47\0\1\105\24\0\1\105\46\0\2\106\65\0\1\34"+
    "\3\0\15\34\1\107\23\34\1\107\4\34\43\0\1\110"+
    "\24\0\1\110\35\0\1\34\3\0\11\34\1\111\1\112"+
    "\23\34\1\111\1\112\6\34\26\0\1\34\3\0\24\34"+
    "\1\113\21\34\26\0\1\34\3\0\2\34\1\114\1\34"+
    "\1\115\16\34\1\114\1\34\1\115\20\34\26\0\1\34"+
    "\3\0\3\34\1\116\11\34\1\117\6\34\1\116\14\34"+
    "\1\117\4\34\47\0\1\120\23\0\1\120\32\0\1\34"+
    "\3\0\46\34\26\0\1\34\3\0\1\34\1\121\2\34"+
    "\1\122\20\34\1\122\5\34\1\121\12\34\26\0\1\34"+
    "\3\0\2\34\1\123\2\34\2\124\1\34\1\125\12\34"+
    "\1\123\11\34\1\125\10\34\26\0\1\34\3\0\3\34"+
    "\1\126\11\34\1\127\6\34\1\126\14\34\1\127\4\34"+
    "\26\0\1\34\3\0\5\34\2\130\37\34\26\0\1\34"+
    "\3\0\11\34\1\131\24\34\1\131\7\34\16\0\1\60"+
    "\1\0\2\60\2\0\72\60\1\62\1\0\3\62\1\0"+
    "\4\62\2\0\64\62\16\0\1\132\20\0\1\132\55\0"+
    "\1\133\31\0\1\133\47\0\1\134\75\0\1\135\31\0"+
    "\1\135\46\0\1\136\20\0\1\136\67\0\1\137\5\0"+
    "\1\137\73\0\1\140\23\0\1\140\32\0\1\34\3\0"+
    "\4\34\1\141\20\34\1\141\20\34\46\0\1\142\23\0"+
    "\1\142\50\0\1\143\24\0\1\143\61\0\1\144\22\0"+
    "\1\144\47\0\1\145\5\0\1\145\61\0\1\146\20\0"+
    "\1\146\47\0\1\34\3\0\15\34\1\147\23\34\1\147"+
    "\4\34\41\0\1\150\24\0\1\150\37\0\1\34\3\0"+
    "\3\34\1\151\20\34\1\151\21\34\26\0\1\34\3\0"+
    "\22\34\1\152\21\34\1\152\1\34\26\0\1\34\3\0"+
    "\25\34\1\153\20\34\26\0\1\34\3\0\1\34\1\154"+
    "\31\34\1\154\12\34\26\0\1\34\3\0\2\34\1\155"+
    "\20\34\1\155\22\34\26\0\1\34\3\0\13\34\1\156"+
    "\5\34\1\156\24\34\26\0\1\34\3\0\15\34\1\157"+
    "\23\34\1\157\4\34\47\0\1\160\23\0\1\160\32\0"+
    "\1\34\3\0\2\34\1\161\20\34\1\161\22\34\26\0"+
    "\1\34\3\0\1\34\1\162\31\34\1\162\12\34\26\0"+
    "\1\34\3\0\14\34\1\163\23\34\1\163\5\34\26\0"+
    "\1\34\3\0\11\34\1\164\24\34\1\164\7\34\26\0"+
    "\1\34\3\0\20\34\1\165\22\34\1\165\2\34\26\0"+
    "\1\34\3\0\13\34\1\166\5\34\1\166\24\34\26\0"+
    "\1\34\3\0\7\34\1\167\24\34\1\167\11\34\35\0"+
    "\1\170\20\0\1\170\55\0\1\171\20\0\1\171\62\0"+
    "\1\172\71\0\1\173\31\0\1\173\50\0\1\174\20\0"+
    "\1\174\72\0\1\175\10\0\1\175\43\0\1\34\3\0"+
    "\2\34\1\176\20\34\1\176\22\34\47\0\1\177\23\0"+
    "\1\177\41\0\1\200\20\0\1\200\63\0\1\201\24\0"+
    "\1\201\36\0\1\34\3\0\4\34\1\202\20\34\1\202"+
    "\20\34\36\0\1\203\20\0\1\203\46\0\1\34\3\0"+
    "\10\34\1\204\24\34\1\204\10\34\26\0\1\34\3\0"+
    "\3\34\1\205\20\34\1\205\21\34\26\0\1\34\3\0"+
    "\5\34\1\206\40\34\26\0\1\34\3\0\1\207\31\34"+
    "\1\207\13\34\26\0\1\34\3\0\3\34\1\210\20\34"+
    "\1\210\21\34\26\0\1\34\3\0\17\34\1\211\10\34"+
    "\1\211\15\34\36\0\1\212\20\0\1\212\46\0\1\34"+
    "\3\0\3\34\1\213\20\34\1\213\21\34\26\0\1\34"+
    "\3\0\2\34\1\214\20\34\1\214\22\34\26\0\1\34"+
    "\3\0\15\34\1\215\23\34\1\215\4\34\26\0\1\34"+
    "\3\0\3\34\1\216\20\34\1\216\21\34\26\0\1\34"+
    "\3\0\4\34\1\217\20\34\1\217\20\34\34\0\1\220"+
    "\20\0\1\220\102\0\1\221\45\0\1\34\3\0\3\34"+
    "\1\222\20\34\1\222\21\34\41\0\1\223\24\0\1\223"+
    "\55\0\1\224\24\0\1\224\43\0\1\225\20\0\1\225"+
    "\47\0\1\34\3\0\2\34\1\226\20\34\1\226\22\34"+
    "\26\0\1\34\3\0\7\34\1\227\24\34\1\227\11\34"+
    "\26\0\1\34\3\0\12\34\1\230\24\34\1\230\6\34"+
    "\26\0\1\34\3\0\3\34\1\231\20\34\1\231\21\34"+
    "\45\0\1\232\102\0\1\233\23\0\1\233\44\0\1\234"+
    "\24\0\1\234\37\0\1\34\3\0\16\34\1\235\23\34"+
    "\1\235\3\34\26\0\1\34\3\0\7\34\1\236\24\34"+
    "\1\236\11\34\61\0\1\237\63\0\1\240\5\0\1\240"+
    "\52\0\1\34\3\0\13\34\1\241\5\34\1\241\24\34"+
    "\62\0\1\242\51\0\1\243\20\0\1\243\50\0\1\34"+
    "\3\0\2\34\1\244\20\34\1\244\22\34\35\0\1\245"+
    "\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6976];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\5\1\1\11\27\1\16\11"+
    "\1\1\1\11\1\1\3\11\7\0\2\1\1\11\1\0"+
    "\1\11\1\1\3\0\1\11\1\1\1\0\7\1\1\0"+
    "\11\1\5\0\1\11\1\0\1\1\2\0\2\11\1\0"+
    "\1\1\1\0\7\1\1\0\7\1\1\11\2\0\3\11"+
    "\1\1\2\0\1\11\1\1\1\0\6\1\1\11\5\1"+
    "\1\11\1\0\1\1\2\0\1\11\4\1\1\0\1\11"+
    "\1\0\2\1\2\0\1\1\1\0\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    // Max size of string constants
    static int MAX_STR_CONST = 1024;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    // For line numbers
    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }

    private AbstractSymbol filename;

    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
	return filename;
    }

    
    void deleteEscape(StringBuffer toDelete) {
    	for (int i = 0; i < toDelete.length(); i++) {
            char potential_backslash = toDelete.charAt(i);
            if (potential_backslash == '\\') {
                char nextone = toDelete.charAt(i + 1);
                if (nextone == 'n' || nextone == 'b' || nextone == 't' || nextone == 'f')
                	;
                else {
                	toDelete.deleteCharAt(i);
                }
            }
        }
    } 

    /*
     * Add extra field and methods here.
     */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolLexer(java.io.Reader in) {
      // empty for now
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     switch(yystate()) {
    case YYINITIAL:
	/* nothing special to do in the initial state */
	break;

/* If necessary, add code for other states here, e.g:
    case LINE_COMMENT:
	   ...
	   break;
 */
    }
    return new Symbol(TokenConstants.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 49: break;
          case 2: 
            { /*
                    *  This should be the very last rule and will match
                    *  everything not matched by other lexical rules.
                    */
                   System.err.println("LEXER BUG - UNMATCHED: " + yytext());
            }
          case 50: break;
          case 3: 
            { curr_lineno++;
            }
          case 51: break;
          case 4: 
            { return new Symbol(TokenConstants.MINUS);
            }
          case 52: break;
          case 5: 
            { return new Symbol(TokenConstants.EQ);
            }
          case 53: break;
          case 6: 
            { /* Integers */
                          return new Symbol(TokenConstants.INT_CONST,
					    AbstractTable.inttable.addString(yytext()));
            }
          case 54: break;
          case 7: 
            { string_buf.setLength(0); yybegin(STRING);
            }
          case 55: break;
          case 8: 
            { return new Symbol(TokenConstants.OBJECTID, AbstractTable.idtable.addString(yytext()));
            }
          case 56: break;
          case 9: 
            { return new Symbol(TokenConstants.PLUS);
            }
          case 57: break;
          case 10: 
            { return new Symbol(TokenConstants.DIV);
            }
          case 58: break;
          case 11: 
            { return new Symbol(TokenConstants.MULT);
            }
          case 59: break;
          case 12: 
            { return new Symbol(TokenConstants.LT);
            }
          case 60: break;
          case 13: 
            { return new Symbol(TokenConstants.DOT);
            }
          case 61: break;
          case 14: 
            { return new Symbol(TokenConstants.NEG);
            }
          case 62: break;
          case 15: 
            { return new Symbol(TokenConstants.COMMA);
            }
          case 63: break;
          case 16: 
            { return new Symbol(TokenConstants.SEMI);
            }
          case 64: break;
          case 17: 
            { return new Symbol(TokenConstants.COLON);
            }
          case 65: break;
          case 18: 
            { return new Symbol(TokenConstants.LPAREN);
            }
          case 66: break;
          case 19: 
            { return new Symbol(TokenConstants.RPAREN);
            }
          case 67: break;
          case 20: 
            { return new Symbol(TokenConstants.AT);
            }
          case 68: break;
          case 21: 
            { return new Symbol(TokenConstants.RBRACE);
            }
          case 69: break;
          case 22: 
            { return new Symbol(TokenConstants.LBRACE);
            }
          case 70: break;
          case 23: 
            { curr_lineno++; yybegin(YYINITIAL);
            }
          case 71: break;
          case 24: 
            { deleteEscape(string_buf); string_buf.append(yytext());
            }
          case 72: break;
          case 25: 
            { yybegin(LINE_COMMENT);
            }
          case 73: break;
          case 26: 
            { return new Symbol(TokenConstants.ASSIGN);
            }
          case 74: break;
          case 27: 
            { return new Symbol(TokenConstants.DARROW);
            }
          case 75: break;
          case 28: 
            { return new Symbol(TokenConstants.FI);
            }
          case 76: break;
          case 29: 
            { return new Symbol(TokenConstants.IF);
            }
          case 77: break;
          case 30: 
            { return new Symbol(TokenConstants.IN);
            }
          case 78: break;
          case 31: 
            { return new Symbol(TokenConstants.OF);
            }
          case 79: break;
          case 32: 
            { return new Symbol(TokenConstants.LET);
            }
          case 80: break;
          case 33: 
            { return new Symbol(TokenConstants.NEW);
            }
          case 81: break;
          case 34: 
            { return new Symbol(TokenConstants.NOT);
            }
          case 82: break;
          case 35: 
            { return new Symbol(TokenConstants.CASE);
            }
          case 83: break;
          case 36: 
            { return new Symbol(TokenConstants.ESAC);
            }
          case 84: break;
          case 37: 
            { return new Symbol(TokenConstants.ELSE);
            }
          case 85: break;
          case 38: 
            { return new Symbol(TokenConstants.LOOP);
            }
          case 86: break;
          case 39: 
            { return new Symbol(TokenConstants.THEN);
            }
          case 87: break;
          case 40: 
            { return new Symbol(TokenConstants.POOL);
            }
          case 88: break;
          case 41: 
            { return new Symbol(TokenConstants.BOOL_CONST, Boolean.TRUE);
            }
          case 89: break;
          case 42: 
            { return new Symbol(TokenConstants.OBJECTID);
            }
          case 90: break;
          case 43: 
            { return new Symbol(TokenConstants.CLASS);
            }
          case 91: break;
          case 44: 
            { return new Symbol(TokenConstants.BOOL_CONST, Boolean.FALSE);
            }
          case 92: break;
          case 45: 
            { return new Symbol(TokenConstants.WHILE);
            }
          case 93: break;
          case 46: 
            { return new Symbol(TokenConstants.ISVOID);
            }
          case 94: break;
          case 47: 
            { return new Symbol(TokenConstants.INHERITS);
            }
          case 95: break;
          case 48: 
            { return new Symbol(TokenConstants.TYPEID);
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

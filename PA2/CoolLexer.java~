/* The following code was generated by JFlex 1.6.1 */

/*
 * CS164: Spring 2004
 * Programming Assignment 2
 *
 * The scanner definition for Cool.
 *
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>cool.lex</tt>
 */
class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LINE_COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\4\1\4\1\4\22\0\1\2\1\0\1\10"+
    "\5\0\1\70\1\71\1\61\1\57\1\65\1\3\1\63\1\60\12\7"+
    "\1\67\1\66\1\62\1\5\1\6\1\0\1\72\1\12\1\56\1\11"+
    "\1\27\1\14\1\17\1\56\1\22\1\20\2\56\1\15\1\56\1\21"+
    "\1\26\1\41\1\56\1\23\1\13\1\24\1\33\1\25\1\31\1\56"+
    "\1\40\1\56\4\0\1\37\1\0\1\44\1\42\1\43\1\53\1\35"+
    "\1\16\1\42\1\47\1\45\2\42\1\36\1\42\1\46\1\52\1\30"+
    "\1\42\1\50\1\34\1\32\1\55\1\51\1\54\3\42\1\74\1\0"+
    "\1\73\1\64\6\0\1\4\32\0\1\2\u15df\0\1\2\u097f\0\13\2"+
    "\35\0\1\4\1\4\5\0\1\2\57\0\1\2\u0fa0\0\1\2\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\4\3\1\11\5\3\1\11\1\3\4\11"+
    "\1\3\6\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\1\1\30\1\2\1\31\1\32\1\33\1\34\7\0"+
    "\1\11\2\35\1\0\1\36\1\37\3\0\1\40\1\11"+
    "\1\0\7\11\1\0\3\11\1\36\1\37\2\11\1\40"+
    "\1\11\5\0\1\41\1\0\1\11\2\0\1\42\1\43"+
    "\1\0\1\11\1\0\5\11\1\41\1\11\1\0\4\11"+
    "\1\42\1\43\1\11\1\44\2\0\1\45\1\46\1\47"+
    "\1\11\2\0\1\50\1\51\1\0\1\50\1\52\1\53"+
    "\1\45\1\46\1\47\1\51\1\44\4\11\1\54\1\0"+
    "\1\55\2\0\1\56\1\54\2\11\1\56\1\0\1\57"+
    "\1\0\1\57\1\11\2\0\1\11\1\0\2\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\267\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u0726\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\u0763"+
    "\0\267\0\u07a0\0\267\0\267\0\267\0\267\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u05f5\0\267"+
    "\0\u09c5\0\267\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\267\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde"+
    "\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u05f5\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u05f5\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\267"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\267\0\267\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u05f5\0\u1310"+
    "\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u05f5\0\u05f5\0\u147e"+
    "\0\267\0\u14bb\0\u14f8\0\267\0\267\0\267\0\u1535\0\u1572"+
    "\0\u15af\0\267\0\u05f5\0\u15ec\0\u05f5\0\u05f5\0\u05f5\0\u05f5"+
    "\0\u05f5\0\u05f5\0\267\0\u05f5\0\u1629\0\u1666\0\u16a3\0\u16e0"+
    "\0\267\0\u171d\0\u05f5\0\u175a\0\u1797\0\267\0\u05f5\0\u17d4"+
    "\0\u1811\0\u05f5\0\u184e\0\267\0\u188b\0\u05f5\0\u18c8\0\u1905"+
    "\0\u1942\0\u197f\0\u19bc\0\267\0\u05f5\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\6\1\10\1\4\1\11"+
    "\1\12\1\13\1\4\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\2\4\1\23\1\4\1\24\1\4\1\25"+
    "\1\26\1\27\1\4\1\30\1\31\1\32\2\4\1\33"+
    "\1\34\1\35\1\34\1\36\1\37\3\34\1\40\1\34"+
    "\1\41\1\34\1\4\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\2\60\1\0\70\60\1\62\1\0"+
    "\6\62\1\63\64\62\76\0\2\6\1\0\1\6\73\0"+
    "\1\64\2\0\1\65\74\0\1\66\75\0\1\11\77\0"+
    "\1\67\2\0\1\70\20\0\1\70\5\0\1\67\45\0"+
    "\1\71\72\0\1\72\1\0\1\73\16\0\1\72\1\0"+
    "\1\73\52\0\1\74\11\0\1\75\6\0\1\74\14\0"+
    "\1\75\31\0\1\34\1\0\1\34\1\76\5\34\1\77"+
    "\23\34\1\76\1\77\11\34\36\0\1\100\24\0\1\100"+
    "\42\0\1\101\2\0\2\102\1\0\1\103\12\0\1\101"+
    "\11\0\1\103\42\0\1\104\11\0\1\105\6\0\1\104"+
    "\14\0\1\105\44\0\1\106\24\0\1\106\43\0\2\107"+
    "\64\0\1\34\1\0\15\34\1\110\23\34\1\110\4\34"+
    "\40\0\1\111\24\0\1\111\34\0\1\34\1\0\11\34"+
    "\1\112\1\113\23\34\1\112\1\113\6\34\25\0\1\34"+
    "\1\0\24\34\1\114\21\34\25\0\1\34\1\0\2\34"+
    "\1\115\1\34\1\116\16\34\1\115\1\34\1\116\20\34"+
    "\25\0\1\34\1\0\3\34\1\117\11\34\1\120\6\34"+
    "\1\117\14\34\1\120\4\34\44\0\1\121\23\0\1\121"+
    "\31\0\1\34\1\0\46\34\25\0\1\34\1\0\1\34"+
    "\1\122\2\34\1\123\20\34\1\123\5\34\1\122\12\34"+
    "\25\0\1\34\1\0\2\34\1\124\2\34\2\125\1\34"+
    "\1\126\12\34\1\124\11\34\1\126\10\34\25\0\1\34"+
    "\1\0\3\34\1\127\11\34\1\130\6\34\1\127\14\34"+
    "\1\130\4\34\25\0\1\34\1\0\5\34\2\131\37\34"+
    "\25\0\1\34\1\0\11\34\1\132\24\34\1\132\7\34"+
    "\16\0\1\60\1\0\2\60\1\0\70\60\1\62\1\0"+
    "\6\62\1\0\64\62\13\0\1\133\20\0\1\133\52\0"+
    "\1\134\31\0\1\134\44\0\1\135\72\0\1\136\31\0"+
    "\1\136\43\0\1\137\20\0\1\137\64\0\1\140\5\0"+
    "\1\140\70\0\1\141\23\0\1\141\31\0\1\34\1\0"+
    "\4\34\1\142\20\34\1\142\20\34\43\0\1\143\23\0"+
    "\1\143\45\0\1\144\24\0\1\144\56\0\1\145\22\0"+
    "\1\145\44\0\1\146\5\0\1\146\56\0\1\147\20\0"+
    "\1\147\46\0\1\34\1\0\15\34\1\150\23\34\1\150"+
    "\4\34\36\0\1\151\24\0\1\151\36\0\1\34\1\0"+
    "\3\34\1\152\20\34\1\152\21\34\25\0\1\34\1\0"+
    "\22\34\1\153\21\34\1\153\1\34\25\0\1\34\1\0"+
    "\25\34\1\154\20\34\25\0\1\34\1\0\1\34\1\155"+
    "\31\34\1\155\12\34\25\0\1\34\1\0\2\34\1\156"+
    "\20\34\1\156\22\34\25\0\1\34\1\0\13\34\1\157"+
    "\5\34\1\157\24\34\25\0\1\34\1\0\15\34\1\160"+
    "\23\34\1\160\4\34\44\0\1\161\23\0\1\161\31\0"+
    "\1\34\1\0\2\34\1\162\20\34\1\162\22\34\25\0"+
    "\1\34\1\0\1\34\1\163\31\34\1\163\12\34\25\0"+
    "\1\34\1\0\14\34\1\164\23\34\1\164\5\34\25\0"+
    "\1\34\1\0\11\34\1\165\24\34\1\165\7\34\25\0"+
    "\1\34\1\0\20\34\1\166\22\34\1\166\2\34\25\0"+
    "\1\34\1\0\13\34\1\167\5\34\1\167\24\34\25\0"+
    "\1\34\1\0\7\34\1\170\24\34\1\170\11\34\32\0"+
    "\1\171\20\0\1\171\52\0\1\172\20\0\1\172\57\0"+
    "\1\173\66\0\1\174\31\0\1\174\45\0\1\175\20\0"+
    "\1\175\67\0\1\176\10\0\1\176\42\0\1\34\1\0"+
    "\2\34\1\177\20\34\1\177\22\34\44\0\1\200\23\0"+
    "\1\200\36\0\1\201\20\0\1\201\60\0\1\202\24\0"+
    "\1\202\35\0\1\34\1\0\4\34\1\203\20\34\1\203"+
    "\20\34\33\0\1\204\20\0\1\204\45\0\1\34\1\0"+
    "\10\34\1\205\24\34\1\205\10\34\25\0\1\34\1\0"+
    "\3\34\1\206\20\34\1\206\21\34\25\0\1\34\1\0"+
    "\5\34\1\207\40\34\25\0\1\34\1\0\1\210\31\34"+
    "\1\210\13\34\25\0\1\34\1\0\3\34\1\211\20\34"+
    "\1\211\21\34\25\0\1\34\1\0\17\34\1\212\10\34"+
    "\1\212\15\34\33\0\1\213\20\0\1\213\45\0\1\34"+
    "\1\0\3\34\1\214\20\34\1\214\21\34\25\0\1\34"+
    "\1\0\2\34\1\215\20\34\1\215\22\34\25\0\1\34"+
    "\1\0\15\34\1\216\23\34\1\216\4\34\25\0\1\34"+
    "\1\0\3\34\1\217\20\34\1\217\21\34\25\0\1\34"+
    "\1\0\4\34\1\220\20\34\1\220\20\34\31\0\1\221"+
    "\20\0\1\221\77\0\1\222\44\0\1\34\1\0\3\34"+
    "\1\223\20\34\1\223\21\34\36\0\1\224\24\0\1\224"+
    "\52\0\1\225\24\0\1\225\40\0\1\226\20\0\1\226"+
    "\46\0\1\34\1\0\2\34\1\227\20\34\1\227\22\34"+
    "\25\0\1\34\1\0\7\34\1\230\24\34\1\230\11\34"+
    "\25\0\1\34\1\0\12\34\1\231\24\34\1\231\6\34"+
    "\25\0\1\34\1\0\3\34\1\232\20\34\1\232\21\34"+
    "\42\0\1\233\77\0\1\234\23\0\1\234\41\0\1\235"+
    "\24\0\1\235\36\0\1\34\1\0\16\34\1\236\23\34"+
    "\1\236\3\34\25\0\1\34\1\0\7\34\1\237\24\34"+
    "\1\237\11\34\56\0\1\240\60\0\1\241\5\0\1\241"+
    "\51\0\1\34\1\0\13\34\1\242\5\34\1\242\24\34"+
    "\57\0\1\243\46\0\1\244\20\0\1\244\47\0\1\34"+
    "\1\0\2\34\1\245\20\34\1\245\22\34\32\0\1\246"+
    "\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6649];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\5\1\1\11\27\1\16\11\1\1"+
    "\1\11\1\1\4\11\7\0\2\1\1\11\1\0\1\11"+
    "\1\1\3\0\1\11\1\1\1\0\7\1\1\0\11\1"+
    "\5\0\1\11\1\0\1\1\2\0\2\11\1\0\1\1"+
    "\1\0\7\1\1\0\7\1\1\11\2\0\3\11\1\1"+
    "\2\0\1\11\1\1\1\0\6\1\1\11\5\1\1\11"+
    "\1\0\1\1\2\0\1\11\4\1\1\0\1\11\1\0"+
    "\2\1\2\0\1\1\1\0\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    // Max size of string constants
    static int MAX_STR_CONST = 1024;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    // For line numbers
    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }

    private AbstractSymbol filename;

    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
	return filename;
    }

    
    void deleteEscape(StringBuffer toDelete) {
        for (int i = 0; i < toDelete.length(); i++) {
            char potential_backslash = toDelete.charAt(i);
            if (potential_backslash == '\\') {
                char nextone = toDelete.charAt(i + 1);
                if (nextone == 'n' || nextone == 'b' || nextone == 't' || nextone == 'f')
                   {
                       if (nextone == 'n') {
                     toDelete.setCharAt(i, '\n');
                     toDelete.deleteCharAt(i + 1);
                       }
                       else if (nextone == 'b') {
                     toDelete.setCharAt(i, '\b');
                     toDelete.deleteCharAt(i + 1);
                       }
                       else if(nextone == 't') {
                     toDelete.setCharAt(i, '\t');
                     toDelete.deleteCharAt(i + 1);
                       }
                       else if(nextone == 'f') {
                     toDelete.setCharAt(i, '\f');
                     toDelete.deleteCharAt(i + 1);
                       }
                    }
                else {
                	toDelete.deleteCharAt(i);
                }
            }
            
            /*
            if (potential_backslash == '\n') {
                System.out.println("it is \n");
                break;
            } else if (potential_backslash == '\\') {
                System.out.println("it is \\");
            }
            */
        }
    } 

    /*
     * Add extra field and methods here.
     */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolLexer(java.io.Reader in) {
      // empty for now
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     switch(yystate()) {
    case YYINITIAL:
	/* nothing special to do in the initial state */
	break;

/* If necessary, add code for other states here, e.g:
    case LINE_COMMENT:
	   ...
	   break;
 */
    }
    return new Symbol(TokenConstants.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 50: break;
          case 2: 
            { string_buf.append(yytext());
            }
          case 51: break;
          case 3: 
            { /*
                    *  This should be the very last rule and will match
                    *  everything not matched by other lexical rules.
                    */
                   System.err.println("LEXER BUG - UNMATCHED: " + yytext());
            }
          case 52: break;
          case 4: 
            { curr_lineno++;
            }
          case 53: break;
          case 5: 
            { return new Symbol(TokenConstants.MINUS);
            }
          case 54: break;
          case 6: 
            { return new Symbol(TokenConstants.EQ);
            }
          case 55: break;
          case 7: 
            { /* Integers */
                          return new Symbol(TokenConstants.INT_CONST,
					    AbstractTable.inttable.addString(yytext()));
            }
          case 56: break;
          case 8: 
            { string_buf.setLength(0); yybegin(STRING);
            }
          case 57: break;
          case 9: 
            { return new Symbol(TokenConstants.OBJECTID, AbstractTable.idtable.addString(yytext()));
            }
          case 58: break;
          case 10: 
            { return new Symbol(TokenConstants.PLUS);
            }
          case 59: break;
          case 11: 
            { return new Symbol(TokenConstants.DIV);
            }
          case 60: break;
          case 12: 
            { return new Symbol(TokenConstants.MULT);
            }
          case 61: break;
          case 13: 
            { return new Symbol(TokenConstants.LT);
            }
          case 62: break;
          case 14: 
            { return new Symbol(TokenConstants.DOT);
            }
          case 63: break;
          case 15: 
            { return new Symbol(TokenConstants.NEG);
            }
          case 64: break;
          case 16: 
            { return new Symbol(TokenConstants.COMMA);
            }
          case 65: break;
          case 17: 
            { return new Symbol(TokenConstants.SEMI);
            }
          case 66: break;
          case 18: 
            { return new Symbol(TokenConstants.COLON);
            }
          case 67: break;
          case 19: 
            { return new Symbol(TokenConstants.LPAREN);
            }
          case 68: break;
          case 20: 
            { return new Symbol(TokenConstants.RPAREN);
            }
          case 69: break;
          case 21: 
            { return new Symbol(TokenConstants.AT);
            }
          case 70: break;
          case 22: 
            { return new Symbol(TokenConstants.RBRACE);
            }
          case 71: break;
          case 23: 
            { return new Symbol(TokenConstants.LBRACE);
            }
          case 72: break;
          case 24: 
            { curr_lineno++; yybegin(YYINITIAL);
            }
          case 73: break;
          case 25: 
            { yybegin(YYINITIAL); deleteEscape(string_buf);  return new Symbol(TokenConstants.STR_CONST, AbstractTable.stringtable.addString(string_buf.toString()));
            }
          case 74: break;
          case 26: 
            { yybegin(LINE_COMMENT);
            }
          case 75: break;
          case 27: 
            { return new Symbol(TokenConstants.ASSIGN);
            }
          case 76: break;
          case 28: 
            { return new Symbol(TokenConstants.DARROW);
            }
          case 77: break;
          case 29: 
            { return new Symbol(TokenConstants.FI);
            }
          case 78: break;
          case 30: 
            { return new Symbol(TokenConstants.IF);
            }
          case 79: break;
          case 31: 
            { return new Symbol(TokenConstants.IN);
            }
          case 80: break;
          case 32: 
            { return new Symbol(TokenConstants.OF);
            }
          case 81: break;
          case 33: 
            { return new Symbol(TokenConstants.LET);
            }
          case 82: break;
          case 34: 
            { return new Symbol(TokenConstants.NEW);
            }
          case 83: break;
          case 35: 
            { return new Symbol(TokenConstants.NOT);
            }
          case 84: break;
          case 36: 
            { return new Symbol(TokenConstants.CASE);
            }
          case 85: break;
          case 37: 
            { return new Symbol(TokenConstants.ESAC);
            }
          case 86: break;
          case 38: 
            { return new Symbol(TokenConstants.ELSE);
            }
          case 87: break;
          case 39: 
            { return new Symbol(TokenConstants.LOOP);
            }
          case 88: break;
          case 40: 
            { return new Symbol(TokenConstants.THEN);
            }
          case 89: break;
          case 41: 
            { return new Symbol(TokenConstants.POOL);
            }
          case 90: break;
          case 42: 
            { return new Symbol(TokenConstants.BOOL_CONST, Boolean.TRUE);
            }
          case 91: break;
          case 43: 
            { return new Symbol(TokenConstants.OBJECTID);
            }
          case 92: break;
          case 44: 
            { return new Symbol(TokenConstants.CLASS);
            }
          case 93: break;
          case 45: 
            { return new Symbol(TokenConstants.BOOL_CONST, Boolean.FALSE);
            }
          case 94: break;
          case 46: 
            { return new Symbol(TokenConstants.WHILE);
            }
          case 95: break;
          case 47: 
            { return new Symbol(TokenConstants.ISVOID);
            }
          case 96: break;
          case 48: 
            { return new Symbol(TokenConstants.INHERITS);
            }
          case 97: break;
          case 49: 
            { return new Symbol(TokenConstants.TYPEID);
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

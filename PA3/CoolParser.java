
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Sep 29 00:20:46 PDT 2015
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue Sep 29 00:20:46 PDT 2015
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\004\000\002\005\010" +
    "\000\002\005\012\000\002\006\002\000\002\006\004\000" +
    "\002\006\005\000\002\007\005\000\002\007\007\000\002" +
    "\007\013\000\002\012\011\000\002\012\010\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\004\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\004\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\004\000\002\015\002\000\002\015\004" +
    "\000\002\016\004\000\002\016\011\000\002\016\010\000" +
    "\002\010\002\000\002\010\003\000\002\010\005\000\002" +
    "\011\005\000\002\013\004\000\002\013\005\000\002\014" +
    "\003\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\006\003\006\004\010\001\002\000\006\002" +
    "\001\004\010\001\002\000\004\002\136\001\002\000\004" +
    "\002\uffff\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\004\055\011\001\002\000\006\011\013\050\012\001\002" +
    "\000\006\051\ufffa\056\020\001\002\000\004\055\014\001" +
    "\002\000\004\050\015\001\002\000\006\051\ufffa\056\020" +
    "\001\002\000\004\043\132\001\002\000\006\051\127\056" +
    "\020\001\002\000\006\044\021\045\022\001\002\000\004" +
    "\055\123\001\002\000\010\042\uffde\046\uffde\056\025\001" +
    "\002\000\006\042\030\046\031\001\002\000\006\042\uffdd" +
    "\046\uffdd\001\002\000\004\044\026\001\002\000\004\055" +
    "\027\001\002\000\006\042\uffdb\046\uffdb\001\002\000\004" +
    "\056\025\001\002\000\004\044\032\001\002\000\004\055" +
    "\033\001\002\000\004\050\034\001\002\000\022\012\044" +
    "\027\042\041\043\045\045\052\036\053\035\054\037\056" +
    "\040\001\002\000\032\010\uffe8\030\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\042\uffe8\043\uffe8\046" +
    "\uffe8\051\uffe8\001\002\000\032\010\uffe7\030\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\042\uffe7\043" +
    "\uffe7\046\uffe7\051\uffe7\001\002\000\032\010\uffe6\030\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\042" +
    "\uffe6\043\uffe6\046\uffe6\051\uffe6\001\002\000\034\010\uffe5" +
    "\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\042\uffe5\043\uffe5\045\113\046\uffe5\051\uffe5\001\002" +
    "\000\022\030\054\032\053\033\056\034\055\035\051\036" +
    "\050\037\047\051\111\001\002\000\022\012\044\027\042" +
    "\041\043\045\045\052\036\053\035\054\037\056\040\001" +
    "\002\000\022\012\044\027\042\041\043\045\045\052\036" +
    "\053\035\054\037\056\040\001\002\000\004\056\066\001" +
    "\002\000\022\012\044\027\042\041\043\045\045\052\036" +
    "\053\035\054\037\056\040\001\002\000\022\030\054\032" +
    "\053\033\056\034\055\035\051\036\050\037\047\046\052" +
    "\001\002\000\022\012\044\027\042\041\043\045\045\052" +
    "\036\053\035\054\037\056\040\001\002\000\022\012\044" +
    "\027\042\041\043\045\045\052\036\053\035\054\037\056" +
    "\040\001\002\000\022\012\044\027\042\041\043\045\045" +
    "\052\036\053\035\054\037\056\040\001\002\000\032\010" +
    "\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\042\uffe9\043\uffe9\046\uffe9\051\uffe9\001\002\000" +
    "\022\012\044\027\042\041\043\045\045\052\036\053\035" +
    "\054\037\056\040\001\002\000\022\012\044\027\042\041" +
    "\043\045\045\052\036\053\035\054\037\056\040\001\002" +
    "\000\022\012\044\027\042\041\043\045\045\052\036\053" +
    "\035\054\037\056\040\001\002\000\022\012\044\027\042" +
    "\041\043\045\045\052\036\053\035\054\037\056\040\001" +
    "\002\000\032\010\uffef\030\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\042\uffef\043\uffef\046\uffef\051" +
    "\uffef\001\002\000\032\010\ufff1\030\ufff1\032\ufff1\033\056" +
    "\034\ufff1\035\051\036\ufff1\037\ufff1\042\ufff1\043\ufff1\046" +
    "\ufff1\051\ufff1\001\002\000\024\010\uffeb\032\053\033\056" +
    "\034\055\035\051\042\uffeb\043\uffeb\046\uffeb\051\uffeb\001" +
    "\002\000\032\010\ufff2\030\ufff2\032\ufff2\033\056\034\ufff2" +
    "\035\051\036\ufff2\037\ufff2\042\ufff2\043\ufff2\046\ufff2\051" +
    "\ufff2\001\002\000\032\010\ufff0\030\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\042\ufff0\043\ufff0\046" +
    "\ufff0\051\ufff0\001\002\000\024\010\uffec\032\053\033\056" +
    "\034\055\035\051\042\uffec\043\uffec\046\uffec\051\uffec\001" +
    "\002\000\024\010\uffed\032\053\033\056\034\055\035\051" +
    "\042\uffed\043\uffed\046\uffed\051\uffed\001\002\000\004\044" +
    "\067\001\002\000\004\055\070\001\002\000\010\010\uffe3" +
    "\026\072\042\uffe3\001\002\000\006\010\075\042\074\001" +
    "\002\000\022\012\044\027\042\041\043\045\045\052\036" +
    "\053\035\054\037\056\040\001\002\000\024\010\uffe2\030" +
    "\054\032\053\033\056\034\055\035\051\036\050\037\047" +
    "\042\uffe2\001\002\000\004\056\100\001\002\000\022\012" +
    "\044\027\042\041\043\045\045\052\036\053\035\054\037" +
    "\056\040\001\002\000\032\010\ufff3\030\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\042\ufff3\043\ufff3" +
    "\046\ufff3\051\ufff3\001\002\000\032\010\ufff4\030\054\032" +
    "\053\033\056\034\055\035\051\036\050\037\047\042\ufff4" +
    "\043\ufff4\046\ufff4\051\ufff4\001\002\000\004\044\101\001" +
    "\002\000\004\055\102\001\002\000\010\010\uffe3\026\072" +
    "\042\uffe3\001\002\000\006\010\104\042\074\001\002\000" +
    "\022\012\044\027\042\041\043\045\045\052\036\053\035" +
    "\054\037\056\040\001\002\000\032\010\uffdf\030\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\042\uffdf" +
    "\043\uffdf\046\uffdf\051\uffdf\001\002\000\032\010\uffe1\030" +
    "\054\032\053\033\056\034\055\035\051\036\050\037\047" +
    "\042\uffe1\043\uffe1\046\uffe1\051\uffe1\001\002\000\032\010" +
    "\uffee\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\042\uffee\043\uffee\046\uffee\051\uffee\001\002\000" +
    "\032\010\uffea\030\054\032\053\033\056\034\055\035\051" +
    "\036\050\037\047\042\uffea\043\uffea\046\uffea\051\uffea\001" +
    "\002\000\004\043\ufff5\001\002\000\032\010\uffe4\030\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\042" +
    "\uffe4\043\uffe4\046\uffe4\051\uffe4\001\002\000\024\012\044" +
    "\027\042\041\043\045\045\046\114\052\036\053\035\054" +
    "\037\056\040\001\002\000\032\010\uffda\030\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\042\uffda\043" +
    "\uffda\046\uffda\051\uffda\001\002\000\006\042\117\046\120" +
    "\001\002\000\024\030\054\032\053\033\056\034\055\035" +
    "\051\036\050\037\047\042\uffd8\046\uffd8\001\002\000\022" +
    "\012\044\027\042\041\043\045\045\052\036\053\035\054" +
    "\037\056\040\001\002\000\032\010\uffd9\030\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\042\uffd9\043" +
    "\uffd9\046\uffd9\051\uffd9\001\002\000\024\030\054\032\053" +
    "\033\056\034\055\035\051\036\050\037\047\042\uffd7\046" +
    "\uffd7\001\002\000\006\042\uffdc\046\uffdc\001\002\000\006" +
    "\026\124\043\ufff7\001\002\000\022\012\044\027\042\041" +
    "\043\045\045\052\036\053\035\054\037\056\040\001\002" +
    "\000\022\030\054\032\053\033\056\034\055\035\051\036" +
    "\050\037\047\043\ufff6\001\002\000\004\043\131\001\002" +
    "\000\004\043\130\001\002\000\006\002\ufffb\004\ufffb\001" +
    "\002\000\006\051\ufff8\056\ufff8\001\002\000\006\051\ufff9" +
    "\056\ufff9\001\002\000\006\051\134\056\020\001\002\000" +
    "\004\043\135\001\002\000\006\002\ufffc\004\ufffc\001\002" +
    "\000\004\002\000\001\002\000\006\002\ufffd\004\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\010\003\004\004\003\005\006\001\001\000" +
    "\004\005\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\132\007\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\016\007\015\001\001\000\002\001" +
    "\001\000\004\007\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\022\011\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\111\001\001\000\002\001\001\000\004" +
    "\012\107\001\001\000\004\012\106\001\001\000\002\001" +
    "\001\000\004\012\045\001\001\000\002\001\001\000\004" +
    "\012\064\001\001\000\004\012\063\001\001\000\004\012" +
    "\062\001\001\000\002\001\001\000\004\012\061\001\001" +
    "\000\004\012\060\001\001\000\004\012\057\001\001\000" +
    "\004\012\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\070\001\001\000\004\016\075\001" +
    "\001\000\004\012\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\102\001\001\000\004\016\104\001\001\000\004\012" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\115\014\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno +
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {



    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }


  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_list ::= exp_list COMMA expr 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*exp_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_list ::= expr 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*exp_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // actuals ::= LPAREN exp_list RPAREN 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = el; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*actuals*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // actuals ::= LPAREN RPAREN 
            {
              Expressions RESULT = null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*actuals*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // formal ::= OBJECTID COLON TYPEID 
            {
              Formal RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new formalc(curr_lineno(), oid, tid); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(7/*formal*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // formal_list ::= formal_list COMMA formal 
            {
              Formals RESULT = null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formal_list ::= formal 
            {
              Formals RESULT = null;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // formal_list ::= 
            {
              Formals RESULT = null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // let_body ::= COMMA OBJECTID COLON TYPEID let_init let_body 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression li = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression lb = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new let(curr_lineno(), oid, tid, li, lb); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*let_body*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // let_body ::= COMMA OBJECTID COLON TYPEID let_init IN expr 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression li = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new let(curr_lineno(), oid, tid, li, e);  
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*let_body*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // let_body ::= IN expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = e; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*let_body*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // let_init ::= ASSIGN expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = e;  
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*let_init*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // let_init ::= 
            {
              Expression RESULT = null;
		 RESULT = new no_expr(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*let_init*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= OBJECTID actuals 
            {
              Expression RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expressions a = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new dispatch(curr_lineno(),
	                             new object(curr_lineno(),
	                                        AbstractTable.idtable.addString("self")),
				     n, a); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= OBJECTID 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new object(curr_lineno(), o); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= BOOL_CONST 
            {
              Expression RESULT = null;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new bool_const(curr_lineno(), b); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= STR_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new string_const(curr_lineno(), s); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= INT_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new int_const(curr_lineno(), i); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= NOT expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new comp(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr LE expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new leq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr EQ expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new eq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr LT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new lt(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= NEG expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new neg(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr DIV expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new divide(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr MULT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new mul(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr MINUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new sub(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr PLUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new plus(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= LET OBJECTID COLON TYPEID let_init let_body 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression li = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression lb = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new let(curr_lineno(), oid, tid, li, lb); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= LET OBJECTID COLON TYPEID let_init IN expr 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression li = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new let(curr_lineno(), oid, tid, li ,e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE 
            {
              Feature RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-8)).value;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new method(curr_lineno(), oid, fl, tid, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID COLON TYPEID ASSIGN expr 
            {
              Feature RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new attr(curr_lineno(), oid, tid, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= OBJECTID COLON TYPEID 
            {
              Feature RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new attr(curr_lineno(), oid, tid, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optional_feature_list ::= optional_feature_list feature SEMI 
            {
              Features RESULT = null;
		Features ofl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = ofl.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*optional_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optional_feature_list ::= feature SEMI 
            {
              Features RESULT = null;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Features(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*optional_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optional_feature_list ::= 
            {
              Features RESULT = null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*optional_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE optional_feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID LBRACE optional_feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n,
		                    AbstractTable.idtable.addString("Object"),
				    f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= class_list class 
            {
              Classes RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class 
            {
              Classes RESULT = null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              programc RESULT = null;
		 RESULT = new programc(curr_lineno(),
                                     new Classes(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


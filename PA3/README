README file for Programming Assignment 3 (Java edition)
=======================================================

Your directory should now contain the following files:

 build.xml
 README
 cool.cup
 bad.cl
 good.cl
 compare-parser           -> [course dir]/src/PA3J/compare-parser
 myparser                 -> [course dir]/src/PA3J/myparser
 ref-parser               -> [course dir]/src/PA3J/ref-parser
 mycoolc                  -> [course dir]/src/PA3J/mycoolc
 cool-tree.java		  -> [course dir]/src/PA3J/cool-tree.java
 cool-tree.aps		  -> [course dir]/src/PA3J/cool-tree.aps
 AbstractSymbol.java	  -> [course dir]/src/PA3J/AbstractSymbol.java
 AbstractTable.java	  -> [course dir]/src/PA3J/AbstractTable.java
 BoolConst.java		  -> [course dir]/src/PA3J/BoolConst.java
 CgenClassTable.java	  -> [course dir]/src/PA3J/CgenClassTable.java
 CgenNode.java		  -> [course dir]/src/PA3J/CgenNode.java
 CgenSupport.java	  -> [course dir]/src/PA3J/CgenSupport.java
 ClassTable.java	  -> [course dir]/src/PA3J/ClassTable.java
 CoolParser.java	  -> [course dir]/src/PA3J/CoolParser.java
 CoolTokenLexer.java	  -> [course dir]/src/PA3J/CoolTokenLexer.java
 Flags.java		  -> [course dir]/src/PA3J/Flags.java
 IdSymbol.java		  -> [course dir]/src/PA3J/IdSymbol.java
 IdTable.java		  -> [course dir]/src/PA3J/IdTable.java
 IntSymbol.java		  -> [course dir]/src/PA3J/IntSymbol.java
 IntTable.java		  -> [course dir]/src/PA3J/IntTable.java
 ListNode.java		  -> [course dir]/src/PA3J/ListNode.java
 Parser.java		  -> [course dir]/src/PA3J/Parser.java
 StringSymbol.java	  -> [course dir]/src/PA3J/StringSymbol.java
 StringTable.java	  -> [course dir]/src/PA3J/StringTable.java
 SymbolTable.java	  -> [course dir]/src/PA3J/SymbolTable.java
 TokenConstants.java	  -> [course dir]/src/PA3J/TokenConstants.java
 TreeConstants.java	  -> [course dir]/src/PA3J/TreeConstants.java
 TreeNode.java		  -> [course dir]/src/PA3J/TreeNode.java
 Utilities.java		  -> [course dir]/src/PA3J/Utilities.java
 *.java			  other generated files

	The build.xml contains targets for compiling and running your
	program. DO NOT MODIFY.
    
	The README contains this info. Part of the assignment is to
	fill in the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and why
	your test cases are adequate. It is part of the assignment to
	clearly and concisely explain things in text as well as to comment
	your code. Just edit this file.

	cool.cup is the skeleton for the parser specification that you
	are to write. It already contains productions for the program
	and the classes. Use them as an example to write the remaining
	productions.  You should also read the CUP documentation.
	This skeleton will compile and run as is, but it doesn't
	do much.

	good.cl, bad.cl test a few features of the grammar. You should
	add tests to ensure that good.cl exercises every legal
	construction of the grammar and that bad.cl exercises as many
	different parsing errors as you can squeeze into one file.

	cool-tree.aps contains the definitions for the tree language
	which you use to construct the abstract syntax tree (AST).  From
	this file, cool-tree.java is automatically generated by a
	utility that compiles the specification into Java classes for
	constructing tree nodes.  This file is provided for your
	reference.  DO NOT MODIFY.

        TreeNode.java and ListNode.java contain definitions used by the
        tree package. DO NOT MODIFY.  

        Parser.java contains a driver to test the parser. DO NOT MODIFY.

	Flags.java implements routines for parsing command line
	flags. DO NOT MODIFY.

        tests is a directory containing ten test cases with expected outputs.
        DO NOT MODIFY.

        The rest of the files are created as byproducts of `CUP', or
        are internal parser support files.  DO NOT MODIFY.
        `CoolParser.java' is the generated Java file containing the
        parser.  DO NOT MODIFY this file directly; instead, edit
        cool.cup and this file will be regenerated automatically.

	Files not discussed are covered in the README for PA2J.

Instructions
------------

	To compile your parser program type:

	% ant parser

	This compiles all the classes and produces an shell script named
	"parser" which invokes Parser.main() as the standalone phase of
	the Cool compiler.  It requires lexer, semant, and cgen to do
	anything useful.

	To test your parser on a file 'foo.cl' type

	% ./myparser foo.cl

	myparser is a shell script that "glues" together lexer and
	parser using pipes.  Don't worry if the line numbers you get by
	running Java version of the parser are slightly off as compared
	to the "official" parser.

	To run your parser on the files good.cl and bad.cl type:

	% ant test

        To run ten examples in tests directory type:
a
        % ant test-all

	If you think your parser is correct and behaves like
	the one we wrote, you may want to run a COOL compiler using
	your parser:

	% ./mycoolc foo.cl

	To overwrite the default lexical analyzer with yours, replace 
	lexer (which is a symbolic link to the "official" lexer) with
        your lexer from PA2.

        To run the reference parser on a file 'fool.cl':

        % ./ref-parser foo.cl

        To easily compare your parser and the reference parser:

        % ./compare-parser foo.cl

        This will create two files: foo.cl.out.my and foo.cl.out.ref

	To turn in your work type:

	% ant submit-clean

	And run the "submit PA3" program. This will automatically collect the
	files good.cl, bad.cl, good.output, bad.output, README, and cool.cup 
        file. Don't forget to edit this README file to include your write-up, 
        and to write your own test cases in good.cl and bad.cl.

 	You may turn in the assignment as many times as you like.
	However, only the last version will be retained for
	grading.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA3J
-----------------
						+--------------------------+
						| CS 164                   |
						| Project 3: Parser        |
						| Design Document          |
						+--------------------------+

					Damien Mendoza-Row	<damien.nrow@berkeley.edu>
					Mingjie Zhao		<jackzhao@berkeley.edu>

1. ---Grammar---
	feature:  we split feature into two non-terminal to handle single features and lists of features. “optional_feature_list” has three cases: no features (return an empty Feature list), one feature, and multiple features. multiple features works by having a recursive definition. features themselves are translated directly from the grammar and have three types: attribute without assignment, attribute with assignment, and methods. Method formals were handled the same way as the feature list, with a recursive definition of one non-terminal for the list of formals (formal_list) and another non-terminal to define the actual formals (formal).
	expressions: we added all missing expressions. Most of them are directly translated from the cool manual to cup (dispatch, conditionals, new, ID). 

	let:  The only tricky expressions were case and let because of the unbounded number of statements that can be inside them (DARROW for case and assignment expressions in let). case was handled similarly to features (by using a recursive definition of non-terminals called case_branch_list and case_branch). let was handled with a recursive let node. By using this recursive call of let expressions there are no ambiguities in the let grammar and and it was not necessary to use the cup precedence function for the let production.
	Precedence for operators was meticulously copied from the cool manual to ensure correctness. 

	if-then-else-fi:  In the lecture, the professor talked about the shift-reduce in "if-then-else"
	expression. We argue that this will not happen in COOL. Since shift-reduce conflict happens when there is nested, recursive if-then expression, the parser do not know which “if” binds to which “else”. But in COOL, since we have “fi” at the end, which restricts the if-else binding to only one case, that “else” always binds to the nearest “if”. So we do not bother to handle the shift reduce conflict here.


2. ---Error Handling---
	In this part, we try to catch and recover from these kind of errors.

	(1)Single errors:
	error in let: shift-reduce conflict
	error in let: let-in nested binding problem
	error in let: going on to next variable, but next variable is terminated correctly
	error in class definition: wrong symbol in definition, but next class is terminated correctly
	error in class definition: wrong symbol in TYPE
	error in class definition: wrong symbol in OBJECTID
	error in feature: wrong going on to next feature, but next feature is terminated correctly


	(2) Multiple errors coming together
	multiple class test and multiple features
	method feature with no formals test
	nested expressions tests
	      

3. ---Tests---
	Good Tests: the tests are in good.cl, we wrote a line for every type of grammar in the cool manual, including multiple statements for productions that had optional parts (e.g. methods with no formals).

	Bad Tests: All the tests are in bad.cl, in which we covers all the error cases described in 
	"error handling" section.

	We also tested the Parser, compared it with the reference implementation, and compiled and ran the stack machine with this parser.
<?xml version="1.0" encoding="utf-8"?>
<project name="test" default="source">  
  <description>
    CS164 Programming Assignment #3
  </description>

  <!-- set global properties for this build -->
  <property environment="env"/> 
  <property name="classdir" value="${env.MASTERDIR}"/>
  <property name="assn" value="3"/>
  <property name="class" value="cs164"/>

  <property name="src" value="cool.cup good.cl bad.cl README"/>
  <property name="csrc" value="AbstractSymbol.java AbstractTable.java BoolConst.java CgenClassTable.java CgenNode.java CgenSupport.java ClassTable.java CoolTokenLexer.java Flags.java IdSymbol.java IdTable.java IntSymbol.java IntTable.java ListNode.java Parser.java StringSymbol.java StringTable.java SymbolTable.java TreeConstants.java TreeNode.java Utilities.java cool-tree.java"/>

  <property name="libs" value="reference-lexer-phase reference-semant-phase reference-cgen-phase reference-anngen-phase"/>
  <property name="cgen" value="CoolParser.java TokenConstants.java"/>
  <property name="cfil" value="${csrc} ${cgen}"/>

  <property name="tsrc" value="compare-parser myparser mycoolc cool-tree.aps ref-parser"/>
  <property name="lsrc" value="build.xml tests/good1.test tests/good2.test tests/good3.test tests/good4.test tests/good5.test tests/good6.test tests/bad1.test tests/bad2.test tests/bad3.test tests/bad4.test"/>
  <property name="output" value="good.output bad.output"/>


  <property name="cupclasspath" value="${classdir}/lib"/>
  <path id="classpath">
    <dirset dir="${classdir}" includes="lib"/>
    <dirset dir="."/>
    <fileset dir="/usr/java/lib" file="rt.jar"/>
  </path>
  <property name="classpath.unix" value="${classdir}/lib:.:/usr/java/lib/rt.jar"/>


  <!-- target: test -->
  <target name="test" depends="parser">
    <exec executable="./myparser">
      <arg line="bad.cl"/>
    </exec>
    <exec executable="./myparser">
      <arg line="good.cl"/>
    </exec>
  </target>

  <target name="test.output" depends="parser">
    <delete file="./test.output"/>
    <exec executable="./myparser" output="bad.output">
      <arg line="bad.cl"/>
    </exec>
    <exec executable="./myparser" output="good.output">
      <arg line="good.cl"/>
    </exec>
  </target>

  <!-- target: test-all -->
  <target name="test-all" depends="parser">
    <echo>---------------
Start 10 test cases:
---------------</echo>
    <exec executable="./compare-parser" output="./tests/test-all.result"> <arg line="tests/good1.test"/> </exec>
    <exec executable="./compare-parser" output="./tests/test-all.result" append="true"> <arg line="tests/good2.test"/> </exec>
    <exec executable="./compare-parser" output="./tests/test-all.result" append="true"> <arg line="tests/good3.test"/> </exec>
    <exec executable="./compare-parser" output="./tests/test-all.result" append="true"> <arg line="tests/good4.test"/> </exec>
    <exec executable="./compare-parser" output="./tests/test-all.result" append="true"> <arg line="tests/good5.test"/> </exec>
    <exec executable="./compare-parser" output="./tests/test-all.result" append="true"> <arg line="tests/good6.test"/> </exec>
    <exec executable="./compare-parser" output="./tests/test-all.result" append="true"> <arg line="tests/bad1.test"/> </exec>
    <exec executable="./compare-parser" output="./tests/test-all.result" append="true"> <arg line="tests/bad2.test"/> </exec>
    <exec executable="./compare-parser" output="./tests/test-all.result" append="true"> <arg line="tests/bad3.test"/> </exec>
    <exec executable="./compare-parser" output="./tests/test-all.result" append="true"> <arg line="tests/bad4.test"/> </exec>
    <echo>---------------
Failed test cases:
---------------</echo>
    <exec executable="cat"><arg file="./tests/test-all.result"/></exec>
    <echo>
You can compare 'tests/NAME.test.out.my' and 'tests/NAME.test.out.ref'
to know more about a failed test case.
    </echo>
    <delete file="./tests/test-all.result"/>
  </target>

  <!-- target: parser -->
  <target name="parser" depends="cls" unless="sourceCheck">
    <delete file="./parser"/>
    <echo file="./parser">#!/bin/sh
java -classpath ${classpath.unix}:`dirname $0` Parser $*
    </echo>
    <chmod perm="u+rx" file="parser"/>
  </target>

  <target name="cls" depends="Cup, sourceCheck" unless="isSourceUpToDate">
    <javac srcdir="." destdir="." includes="${cfil}" debug="true" nowarn="true">
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="Cup" depends="parserFileCheck" unless="isParserFileUpToDate">
    <echo>Compiling cool.cup</echo>
    <exec executable="java_cup" input="cool.cup" output="cool.output">
      <arg line="-parser CoolParser -symbols TokenConstants -expect 10000 -dump -nopositions"/>
    </exec>
    <exec executable="egrep" input="cool.output">
      <arg line="'^Error at'"/>
    </exec>
    <fail>
      <condition>
        <not> <uptodate targetfile="./CoolParser.java" srcfile="./cool.cup"/></not>
      </condition>
    </fail>
  </target>

  <target name="parserFileCheck">
    <condition property="isParserFileUpToDate">
      <and>
        <uptodate targetfile="./CoolParser.java" srcfile="./cool.cup"/>
        <uptodate targetfile="./TokenConstants.java" srcfile="./cool.cup"/>
      </and>
    </condition>
  </target>

  <target name="sourceCheck">
    <uptodate 
      property="isSourceUpToDate"
      targetfile="./parser">
      <srcfiles dir="." includes="${cfil}"/>
    </uptodate>
  </target>


  <!-- targe: source-->
  <target name="source">
    <mkdir dir="./tests"/>
    <exec executable="${classdir}/etc/link-shared">
      <arg line="${assn} ${lsrc}"/>
    </exec>
    <exec executable="${classdir}/etc/copy">
      <arg line="${assn} ${src}"/>
    </exec>
    <apply executable="ln">
      <arg value="-s"/>
      <arg value="-f"/>
      <fileset dir="${classdir}/bin" includes="${libs}"/>
      <fileset dir="${classdir}/src/cool/PA${assn}J" includes="${tsrc} ${csrc}"/>
    </apply>
    <move file="reference-lexer-phase" tofile="lexer"/>
    <move file="reference-semant-phase" tofile="semant"/>
    <move file="reference-cgen-phase" tofile="cgen"/>
    <move file="reference-anngen-phase" tofile="anngen"/>
  </target>

  <!-- target: clean -->
  <target name="clean">
    <delete>
      <fileset dir="." includes="*~ *.s *.class ${cgen} ${output}"/>
      <fileset dir="." includes="core parser"/>
    </delete>
  </target>


  <!-- target: submit-clean -->
  <target name="submit-clean" depends="test.output">
    <delete>
      <fileset dir="." includes="*~ *.s *.class ${cgen}"/>
      <fileset dir="." includes="core parser"/> 
    </delete>
  </target>
</project>
